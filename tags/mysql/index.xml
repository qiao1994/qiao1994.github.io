<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>MySQL - 标签 - 满地可的笔记本</title>
        <link>https://qiao1994.github.io/tags/mysql/</link>
        <description>MySQL - 标签 - 满地可的笔记本</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 14 Jul 2019 13:30:30 &#43;0000</lastBuildDate><atom:link href="https://qiao1994.github.io/tags/mysql/" rel="self" type="application/rss+xml" /><item>
    <title>MySQL join操作备忘</title>
    <link>https://qiao1994.github.io/mysql_join%E5%A4%87%E5%BF%98/</link>
    <pubDate>Sun, 14 Jul 2019 13:30:30 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://qiao1994.github.io/mysql_join%E5%A4%87%E5%BF%98/</guid>
    <description><![CDATA[join本质上是用驱动表的每个记录去一一匹配被驱动表（会包含重复记录），然后根据条件做优化。 关键点 尽量把条件放到ON后，这里的条件可以用在初]]></description>
</item><item>
    <title>MySQL学习总结</title>
    <link>https://qiao1994.github.io/mysql%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</link>
    <pubDate>Fri, 14 Jun 2019 15:46:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://qiao1994.github.io/mysql%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[一个字总结：很有收获 两个字总结：通透 把所有内容学习完之后再回过头来把这些内容串起来，形成一个小知识网络，然后用一张图来表达我的思想感情。 I&rsquo;m on]]></description>
</item><item>
    <title>43.要不要使用分区表</title>
    <link>https://qiao1994.github.io/43-%E8%A6%81%E4%B8%8D%E8%A6%81%E4%BD%BF%E7%94%A8%E5%88%86%E5%8C%BA%E8%A1%A8/</link>
    <pubDate>Sun, 02 Jun 2019 11:50:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://qiao1994.github.io/43-%E8%A6%81%E4%B8%8D%E8%A6%81%E4%BD%BF%E7%94%A8%E5%88%86%E5%8C%BA%E8%A1%A8/</guid>
    <description><![CDATA[分区表跟用户分表比起来，有两个绕不开的问题：一个是第一次访问的时候需要访问所有分区，另一个是共用MDL锁。 如果要使用分区表，就不要创建太多的]]></description>
</item><item>
    <title>42.grant之后要不要执行fush privileges</title>
    <link>https://qiao1994.github.io/42-grant%E4%B9%8B%E5%90%8E%E8%A6%81%E4%B8%8D%E8%A6%81%E6%89%A7%E8%A1%8Cfush-privileges/</link>
    <pubDate>Sun, 02 Jun 2019 11:39:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://qiao1994.github.io/42-grant%E4%B9%8B%E5%90%8E%E8%A6%81%E4%B8%8D%E8%A6%81%E6%89%A7%E8%A1%8Cfush-privileges/</guid>
    <description><![CDATA[grant语句会同时修改数据表和内存，判断权限的时候使用的是内存数据。因此，规范地使用grant和revoke语句，是不需要随后加上flus]]></description>
</item><item>
    <title>41.如何快速的复制一张表</title>
    <link>https://qiao1994.github.io/41-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E7%9A%84%E5%A4%8D%E5%88%B6%E4%B8%80%E5%BC%A0%E8%A1%A8/</link>
    <pubDate>Sun, 02 Jun 2019 11:29:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://qiao1994.github.io/41-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E7%9A%84%E5%A4%8D%E5%88%B6%E4%B8%80%E5%BC%A0%E8%A1%A8/</guid>
    <description><![CDATA[复制一张表的方式 物理拷贝的方式速度最快，尤其对于大表拷贝来说是最快的方法。如果出现误删表的情况，用备份恢复出误删之前的临时库，然后再把临时库]]></description>
</item><item>
    <title>40.insert的锁</title>
    <link>https://qiao1994.github.io/40-insert%E7%9A%84%E9%94%81/</link>
    <pubDate>Sun, 02 Jun 2019 11:20:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://qiao1994.github.io/40-insert%E7%9A%84%E9%94%81/</guid>
    <description><![CDATA[insert … select 是很常见的在两个表之间拷贝数据的方法。在可重复读隔离级别下，这个语句会给select的表里扫描到的记录和间隙加读锁。 而如果insert]]></description>
</item><item>
    <title>38.内存表</title>
    <link>https://qiao1994.github.io/38-%E5%86%85%E5%AD%98%E8%A1%A8/</link>
    <pubDate>Sun, 02 Jun 2019 11:15:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://qiao1994.github.io/38-%E5%86%85%E5%AD%98%E8%A1%A8/</guid>
    <description><![CDATA[内存表 不适合用作普通表 重启会丢数据，如果一个备库重启，会导致主备同步线程停止；如果主库跟这个备库是双M架构，还可能导致主库的内存表数据被删掉]]></description>
</item><item>
    <title>39.自增主键为啥不是连续的</title>
    <link>https://qiao1994.github.io/39-%E8%87%AA%E5%A2%9E%E4%B8%BB%E9%94%AE%E4%B8%BA%E5%95%A5%E4%B8%8D%E6%98%AF%E8%BF%9E%E7%BB%AD%E7%9A%84/</link>
    <pubDate>Sun, 02 Jun 2019 11:15:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://qiao1994.github.io/39-%E8%87%AA%E5%A2%9E%E4%B8%BB%E9%94%AE%E4%B8%BA%E5%95%A5%E4%B8%8D%E6%98%AF%E8%BF%9E%E7%BB%AD%E7%9A%84/</guid>
    <description><![CDATA[为什么自增主键不一定是连续的 在MyISAM引擎里面，自增值是被写在数据文件上的 在InnoDB中，自增值是被记录在内存的，所以每次重启后，都会]]></description>
</item><item>
    <title>37.啥时候使用内部临时表</title>
    <link>https://qiao1994.github.io/37-%E5%95%A5%E6%97%B6%E5%80%99%E4%BD%BF%E7%94%A8%E5%86%85%E9%83%A8%E4%B8%B4%E6%97%B6%E8%A1%A8/</link>
    <pubDate>Sun, 02 Jun 2019 10:55:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://qiao1994.github.io/37-%E5%95%A5%E6%97%B6%E5%80%99%E4%BD%BF%E7%94%A8%E5%86%85%E9%83%A8%E4%B8%B4%E6%97%B6%E8%A1%A8/</guid>
    <description><![CDATA[什么时候会使用内部临时表？ 实例 union 合并后判断唯一；union all则不需要 group by 排序和计数时；如果有索引，则不需要用到临时表 理论 如果语句执行过程]]></description>
</item><item>
    <title>36.临时表</title>
    <link>https://qiao1994.github.io/36-%E4%B8%B4%E6%97%B6%E8%A1%A8/</link>
    <pubDate>Sun, 02 Jun 2019 10:35:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://qiao1994.github.io/36-%E4%B8%B4%E6%97%B6%E8%A1%A8/</guid>
    <description><![CDATA[临时表 创建语句reate temporary table temp_t(id int primary key)engine=innodb; 由session创建，且只能被创建的session访问到，可以和普通表同名（优先访问临时表），当sess]]></description>
</item></channel>
</rss>
